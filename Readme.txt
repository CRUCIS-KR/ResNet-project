< 프로젝트에 대한 간단한 소개 및 직접 소스 코드를 사용하여 모델을 학습해 볼 수 있게 설명 >

-----------------------------------------------------------------------------------------------------------------------------------------------------

프로젝트: ResNet을 이용한 전이 학습을 통해 사람, 동물, 사물을 분류하는 이미지 분류 모델 구현

- 프로젝트는 계획서, 보고서, 소스 코드 4개, 모델 평가에 대한 파일과 테스트에 사용하는 이미지 12장이 있다.

- 소스 코드에는 코드에 대한 설명과 전반적인 동작이 주석으로 작성되어 있다.

- 프로젝트에 대한 자세한 이론에 대한 설명은 보고서를 참고하고 소스 코드와 함께 확인 할 것을 권장한다.

- 보고서는 프로젝트 주제 선정 동기 및 개요, 목표 설정 그리고 이에 대한 프로젝트 준비, 구현, 평가 그리고 개선을 포함하고 있다.

- 모델의 학습 성능에 대한 시각화 자료와 평가 지표를 확인 할 수 있게 제공하고 있다.

- 직접 모델을 준비하지 않고 사전에 준비된 최고 성능 모델오 테스트(시연)을 할 수 있으며 테스트 이미지는 총 12장이 준비되어 있다.

-----------------------------------------------------------------------------------------------------------------------------------------------------

파이썬, 라이브러리 버전: 파이썬 3.11 버전을 사용했으며 Pytoch 라이브러리를 제외한 모든 라이브러리는 최신 버전이다.

- Pytorch 라이브러리 설치 시 nvidia-smi 혹은 nvcc --version 명령어를 통해 구동 환경의 CUDA 버전을 확인 후 아래 명령어를 입력하여 설치할 것을 권장한다.

- pip install torch torchvision --index-url https://download.pytorch.org/whl/cu?

- 위 명령어는 pytorch가 GPU를 사용할 수 있게 지원 CUDA 버전을 명시하여 설치하는 것이다. ?에는 앞서 확인 한 CUDA 버전을 입력하면 된다. 예) CUDA 버전이 
  11.8 이라면 118 입력

- 만약 GPU가 없는 환경이라면 버전 명시 없이 최신 버전으로 설치하면 되지만 프로젝트 GPU 사용 환경에 더 적합하여 GPU를 사용할 것을 권장한다.

- 사전에 제공한 최고 성능 모델을 불러와 test.py로 예측을 시연해 보는 것은 CPU로 가능하나 직접 학습을 해본다면 GPU 사용을 권장한다.

-----------------------------------------------------------------------------------------------------------------------------------------------------

사용 방법: 사용 방법을 단계적으로 적용하여 설명하며 소스 코드의 주석 설명을 확인하고 보고서를 참고하여 진행할 것을 권장한다.

1. 모델을 직접 학습해보기 위해서는 데이터 셋을 준비해야 하며 사전에 준비된 데이터 셋을 다운로드하여 데이터 준비 과정을 생략해도 된다. 5번으로 이동

    - https://github.com/CRUCIS-KR/ResNet-project
    
    - 깃허브 링크를 통해 dataset 폴더 전체를 다운로드하여 압축해제 한 것을 ResNet.py와 같은 폴더에 위치시킨다.

2. 만약 1번을 시행하지 않고 직접 데이터를 준비하여 데이터 셋을 구축하기 위해서는 2, 3, 4번의 과정을 거쳐 데이터를 준비해야 한다.

    - data_find.py는 사람과 동물 그리고 사물 이미지 데이터를 Open images에서 다운로드하는 코드이다.

    - fiftyone.zoo를 통해 데이터를 다운로드하면 본인의 C드라이브 user 폴더에 fiftyone 폴더가 생성되고 해당 위치에 데이터가 저장된다. 탐색기로 fiftyone을 
      찾아도 된다.

    - 소스 코드는 다운로드 시 레이블이 섞이는 것을 방지하기 위해 fifone.zoo로 다운로드 시 같은 폴더에 데이터가 저장되게 설계되어 사람, 동물, 사물을 각각 
      다운로드 하도록 하나를 제외한 나머지는 주석으로 실행되지 않게 작성되어 있다. 하나를 다운로드 했으면 주석 처리하고 다음 레이블 다운로드 코드의 주석을 
      제거하는 식으로 실행한다.

    - 하나의 레이블을 다운로드하면 저장된 위치로 가서 이미지 데이터를 잘 가져왔는지 확인하고 이미지가 저장된 폴더의 이름을 해당 레이블로 변경할 것을 권장한다. 
      이는 다음 레이블 다운로드 시 폴더의 이름을 바꾸지 않으면 같은 위치에 이미지가 저장되기 때문에 폴더를 다운로드한 이미지의 레이블로 이름을 변경하고 다음 
      코드를 실행해야 한다. 

    - 이미지 저장 경로를 파라미터로 설정할 수 있으나 6만장을 한번에 다운로드하면 중간에 코드가 중단되었을때 다시 전체를 다운로드해야 하는 문제가 있기 때문에 따로 
      가져오는 것을 권장한다.

    - 만약 다운로드하는 이미지의 클래스를 변경하고 싶다면 classes= 에서 작성되는 리스트의 내용을 추가하거나 삭제하여 조정할 수 있으나 클래스의 이름을 
      Open images에서 제공하는 형태로 작성되어야 하고 클래스 리스트의 내용을 조정했다면 어떤 것을 추가했고 삭제했는지를 3번의 data_fix.py에서도 수정해야 한다.

3. 2번의 실행 결과로 사람, 동물, 사물 이미지 데이터를 가져오는데 성공했다면 data_fix.py를 통해 원본 이미지에서 원하는 클래스만 추출하여 가공한다.

    - 14, 15행에 작성되어 있는 것은 다운로드한 이미지의 경로와 소스 코드 실행으로 추출된 이미지가 저장되는 폴더의 이름이다. 14행에는 다운로드한 이미지가 있는 
      폴더 중 추출을 시작할 폴더의 절대 경로를 지정해주면 된다. 소스 코드 실행 후 다음 추출을 시작할 폴더로 경로를 변경하여 반복한다.

    - 15행은 14행에 맞춰서 추출할 폴더의 레이블에 맞춰서 설정한다. 소스 코드 실행 후 다음 폴더 레이블에 맞게 수정한다. 가공된 이미지는 해당 레이블 이름의 폴더로 
      실행 위치에 저장된다.

    - 밑의 annotation = Path("?/detections.csv")는 추출위한 정보가 적힌 csv 파일이며 다운로드한 이미지가 있는 상위 폴더에 detections.csv가 있으며 해당 경로로 
      작성한다. 이 부분은 매 코드 실행 시 추가 수정이 필요없다.

    - 만약 2번에서 다운로드하는 클래스의 리스트를 변경했다면 소스 코드의 23, 25, 29행인 클래스 고유 ID 리스트를 수정해주어야 한다. 각각의 레이블별로 클래스 ID가 
      리스트로 구성되어 있고 목록은 data_find.py에서 다운로드한 클래스와 동일하다. 따라서 2번에서 수정한 항목을 똑같이 이 부분에 적용해야 하고 ID는 다운로드한 
      이미지 상위 폴더에서 class ID에 대한 csv파일이 있어 확인 가능하다.

    - 38행에서 isin안에 레이블에 맞는 클래스 ID 리스트를 넣어주면 된다.

    - 109행은 멀티프로세싱을 사용하여 이미지를 가공하는 코드이고 Pool()안에 적힌 숫자는 사용하는 CPU 코어의 개수이며 data_fix.py는 멀티프로세싱을 사용하여 
      처리 속도를 높였다.

    - 실행 환경의 CPU 제원을 확인하여 총 코어 개수의 절반으로 수정할 것을 권장한다. (인텔의 경우 E코어 포함)

    - 올 코어로 사용하면 코드 실행이 안정적이지 못하기 때문에 절반을 권장하고 여유가 있다면 추가해서 사용해해도 좋다.

    - 최종적으로 총 3번의 실행을 통해 person, animal, object 폴더에 가공된 이미지가 들어가야 한다.

4. 3번의 실행 결과로 3개의 레이블에 대한 가공 이미지가 저장되었다면 dataset 폴더 구조를 만들어야 한다.

    - 보고서에 작성된 데이터 셋 폴더 구조를 확인할 것을 권장한다.

    - 1번의 깃허브 링크를 통해 준비된 dataset 폴더의 구조를 똑같이 만드는 과정이며 모델 학습에 사용될 수 있는 형태로 구축하는 과정이다.

    - dataset 이름의 폴더를 ResNet.py가 있는 폴더에 만들어 소스 코드와 dataset이 같은 루트 위치에 있게 한다.

    - dataset 폴더 안에 train과 val 이름의 폴더를 만들고 2개의 폴더 안에 animal, object, person 이름의 3개의 폴더를 똑같이 만든다.

    - 2번을 통해 만들어진 3개의 레이블에 대한 이미지의 총 개수를 계산하고 이를 8 : 2 = train : val로 분할 계산한다.

    - 계산된 2개의 값을 3등분하여 계산한다. 3등분된 값은 train과 val 폴더 안 animal, object, person 폴더에 각각 들어가야 할 이미지 개수이고 나머지 값은 
      고르게 분배한다.

    - 분배 개수가 정해졌다면 가공된 이미지의 레이블에 맞게 각각의 animal, object, person 폴더에 이동시킨다.

    - 최종적으로 dataset 폴더 안에 train과 val 폴더가 있고 그 안에 3개의 레이블이 달린 폴더가 있어 해당 폴더에는 이미지 데이터가 저장되어 8 : 2로 
      분할된 dataset이 완성된다.

5. dataset이 준비되었고 모델을 학습시키기 위한 설정 방법이다.

    - dataset과 ResNet.py는 같은 폴더에 있어야 한다.

    - print(torch.cuda.is_available())를 통해 GPU를 인식하는지 확인할 수 있고 false라면 위의 내용인 pytorch 설치 과정을 참고하여 재설치해야 한다. 
      GPU는 그래픽메모리 6GB 이상인 제품을 사용할 것을 권장한다. (최소 RTX 2060)

    - 모델 학습을 직접 진행하지 않는다면 CPU로도 test.py를 실행하여 모델을 테스트해 볼 수 있다.

    - 32행의 파라미터는 멀티프로세싱을 위한 코어 개수이며 실행 환경의 CPU 제원의 맞게 수정해야 하며 총 코어 개수의 절반으로 설정할 것을 권장한다.

    - 52행은 모델을 불러오는 코드이며 resnet18과 18의 가중치를 불러오고 있으며 resnet50으로 학습 시 18을 50으로 수정한다.

    - 123행에서 모델을 저장할 때 resnet18과 resnet50을 구분하기 위해 사용한 모델의 이름으로 수정한다. 18 <-> 50 

    - 131행은 저장된 최고 성능을 불러오는 코드이고 resnet 18과 50 중 코드에서 사용한 모델로 수정한다.

    - 164, 175, 181행은 시각화 이미지와 평가 지표 텍스트 파일을 저장하는 코드이고 resnet 18과 50에 대한 결과를 비교하여 확인하고 싶다면 18에서 사용한 
      파일 이름을 변경하여 50의 결과를 따로 저장한다. 변경하지 않아도 결과는 model_info에 저장되지만 다른 resnet 모델로 학습 시 결과 저장에서 파일을 
      덮어쓰기 때문에 전 기록이 남지 않는다.

    - 최종적으로 코드 실행 시 모델의 학습과 평가 결과를 터미널과 시각화 이미지 그리고 평가 지표 텍스트 파일로 확인이 가능하고 결과 정보는 실행 폴더 위체에 
      model_info로 저장된다.

6. 모델을 테스트하기 위한 방법이다.

    - .pt 파일이 test.py와 같은 루트 위치에 있어야 한다.

    - 학습을 직접 진행하지 않아도 프로젝트의 ResNet18.pt는 바로 테스트할 수 있다.

    - 만약에 ResNet50.pt를 테스트한다면 test.py의 23, 25행에 18을 50으로 바꾸면 된다.

    - test_image에는 샘플 12장이 있으며 코드는 그 중 10장을 가져와 테스트한다. 만약에 테스트 이미지 수를 변경하고 싶으면 30행에 [:10] 안에 숫자를 원하는 
      숫자로 수정한다.

    - 10장 이상을 테스트한다면 테스트 이미지를 추가해야 하며 이미지 사이즈가 224x224px 이어야 한다. 필요 시 규격에 맞게 만들어 test_image 폴더에 저장한다.

    - 10장 이상을 테스트한다면 31행의 figsize=(15, 8) 에서 (가로, 세로) 길이를 늘려야 한다. 기존의 코드는 10장에 최적하여 맞춘 비율이다. 15는 1500px을 의미한다. 

------------------------------------------------------------------------------------------------------------------------------------------------------
